node n9 {
    type wlan
    network-config {
	hostname wlan
	!
	interface wireless
	 ip address 172.16.0.0/24
	 ipv6 address a::0/120
	!
	mobmodel
	coreapi
	basic_range
	ns2script
	!
    }
    custom-config {
	custom-config-id basic_range
	custom-command {3 3 9 9 9}
	config {
	range=350
	bandwidth=200000
	jitter=0
	delay=20000
	error=0
	}
    }
    custom-config {
	custom-config-id ns2script
	custom-command {10 3 11 10 10 10 10 10}
	config {
	file=/home/packit/ece5486_hw7b/bouncing.scen
	refresh_ms=250
	loop=0
	autostart=
	map=
	script_start=
	script_pause=
	script_stop=
	}
    }
    canvas c1
    iconcoords {831.0 57.0}
    labelcoords {831.0 89.0}
    services {}
    interface-peer {e4 n2}
    interface-peer {e5 n1}
    interface-peer {e0 n3}
}

node n2 {
    type router
    model PC
    network-config {
	hostname n2
	!
	interface eth0
	 ip address 172.16.0.20/24
	 ipv6 address a::20/120
	!
    }
    canvas c1
    iconcoords {135.0 254.0}
    labelcoords {135.0 286.0}
    interface-peer {eth0 n9}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('mgen_n2.sh', )
	cmdup=('mgen_n2.sh', )
	starttime=1
	}
    }
    custom-config {
	custom-config-id service:UserDefined:mgen_n2.sh
	custom-command mgen_n2.sh
	config {
	mgen "2.0 on 1 tcp src 5000 dst a::1/10000 Periodic [10 100] count 5000"
	
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	# HW7B
	interface eth0
	  ip address 172.16.0.20/24
	  ipv6 address a::20/120
	  ipv6 ospf6 instance-id 65
	  ipv6 ospf6 hello-interval 3
	  ipv6 ospf6 dead-interval 6
	  ipv6 ospf6 retransmit-interval 5
	  ipv6 ospf6 diffhellos
	  ipv6 ospf6 adjacencyconnectivity uniconnected
	  ipv6 ospf6 lsafullness mincostlsa
	!
	router ospf6
	  router-id 172.16.0.2
	  interface eth0 area 0.0.0.0
	  protocol-traffic-class 184
	  redistribute ospf
	  redistribute connected
	!
	
	interface eth0
	  ip address 172.16.0.2/32
	  ipv6 address a::2/128
	!
	router ospf6
	  router-id 172.16.0.2
	  interface eth0 area 0.0.0.0
	!
	
	}
    }
    custom-config {
	custom-config-id service:IPForward
	custom-command IPForward
	config {
	files=('ipforward.sh', )
	}
    }
    custom-config {
	custom-config-id service:IPForward:ipforward.sh
	custom-command ipforward.sh
	config {
	#!/bin/sh
	# auto-generated by IPForward service (utility.py)
	/sbin/sysctl -w net.ipv4.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.default.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.default.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.all.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.default.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.all.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.default.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth0.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth0.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth0.rp_filter=0
	#
	/sbin/sysctl -w net.ipv6.conf.eth0.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.eth0.send_redirects=1
	/sbin/sysctl -w net.ipv6.conf.eth0.rp_filter=0
	/sbin/sysctl -w net.ipv6.conf.eth0.accept_redirects=1
	
	}
    }
    services {OSPFv3 zebra IPForward UserDefined}
}

node n1 {
    type router
    model PC
    network-config {
	hostname n1
	!
	interface eth0
	 ip address 172.16.0.21/24
	 ipv6 address a::21/120
	!
    }
    canvas c1
    iconcoords {700.0 250.0}
    labelcoords {700.0 282.0}
    interface-peer {eth0 n9}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('relay_ipv6.py', )
	cmdup=('python relay_ipv6.py', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:relay_ipv6.py
	custom-command relay_ipv6.py
	config {
	#/usr/bin/python
	
	#########################################################################
	#
	#  FILE: relay_ipv6.py
	#
	#  DESCRIPTION: The purpose of this recipe is to gather packets from node 
	#      N2 and carry them over to node N3 as expediently as possible.
	#
	#  CREATED: <unfinished>
	#
	#########################################################################
	
	#
	#  THIS LOOKS A LOT LIKE GATHERER_IPV6.PY.  MODIFY THIS SO THAT IT PERFORMS
	#  THE RELAY FUNCTION
	#
	
	import socket
	import sys
	import struct
	from subprocess import check_output
	
	LISTEN_PORT = 10000
	
	# Determine my IPV6 address:
	myIP = check_output(['hostname', '-I']).split()[1]
	print("My IPV6 address is "+myIP)
	
	server_address = (myIP, 10000, 0, 0)
	
	# Create a TCP/IP socket
	sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM, 0)
	
	# Bind the socket to the port
	sock.bind(server_address)
	# Listen for incoming connections
	sock.listen(1)
	
	print("Ready for action.")
	pktcount = 0
	
	while True:
	    # Wait for a connection
	    connection, client_address = sock.accept()
	    try:
	        print >>sys.stderr, 'connection from', client_address
	
	        # Receive the data in small chunks and retransmit it
	        while True:
	            data = connection.recv(4096)
	            if not data:
	                print >>sys.stderr, 'no more data from', client_address
	                break
	            flowId = struct.unpack('>I',data[4:8])[0]
	            if flowId != 1: continue
	            seq = struct.unpack('>I',data[8:12])[0]
	            pktcount+=1
	            print(myIP+": From "+str(client_address[0])+": SEQ  = "+str(seq)+ " PKTCOUNT: "+str(pktcount))
	
	
	    finally:
	        # Clean up the connection
	        print("All done.  A total of "+str(pktcount)+" packets were successfully received.")
	        connection.close()
	
	
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	# HW7B
	interface eth0
	  ip address 172.16.0.21/24
	  ipv6 address a::21/120
	  ipv6 ospf6 instance-id 65
	  ipv6 ospf6 hello-interval 3
	  ipv6 ospf6 dead-interval 6
	  ipv6 ospf6 retransmit-interval 5
	  ipv6 ospf6 diffhellos
	  ipv6 ospf6 adjacencyconnectivity uniconnected
	  ipv6 ospf6 lsafullness mincostlsa
	!
	router ospf6
	  router-id 172.16.0.1
	  interface eth0 area 0.0.0.0
	  protocol-traffic-class 184
	  redistribute ospf
	  redistribute connected
	!
	
	}
    }
    custom-config {
	custom-config-id service:IPForward
	custom-command IPForward
	config {
	files=('ipforward.sh', )
	}
    }
    custom-config {
	custom-config-id service:IPForward:ipforward.sh
	custom-command ipforward.sh
	config {
	#!/bin/sh
	# auto-generated by IPForward service (utility.py)
	/sbin/sysctl -w net.ipv4.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.default.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.default.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.all.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.default.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.all.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.default.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth0.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth0.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth0.rp_filter=0
	#
	/sbin/sysctl -w net.ipv6.conf.eth0.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.eth0.send_redirects=1
	/sbin/sysctl -w net.ipv6.conf.eth0.rp_filter=0
	/sbin/sysctl -w net.ipv6.conf.eth0.accept_redirects=1
	
	}
    }
    services {OSPFv3 zebra IPForward UserDefined}
}

node n3 {
    type router
    model PC
    network-config {
	hostname n3
	!
	interface eth0
	 ip address 172.16.0.22/24
	 ipv6 address a::22/120
	!
    }
    canvas c1
    iconcoords {839.0 251.0}
    labelcoords {839.0 283.0}
    interface-peer {eth0 n9}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('gatherer_ipv6.py', )
	cmdup=('python gatherer_ipv6.py', )
	meta=Gatherer
	}
    }
    custom-config {
	custom-config-id service:UserDefined:gatherer_ipv6.py
	custom-command gatherer_ipv6.py
	config {
	#/usr/bin/python
	
	#########################################################################
	#
	#  FILE: gatherer_ipv6.py
	#
	#  DESCRIPTION: The purpose of this recipe is to gather and count incoming
	#      packets during a limited period of time.
	#
	#  CREATED: 3/2020, P. Athanas, Virginia Tech
	#
	#########################################################################
	
	import socket
	import sys
	import struct
	from subprocess import check_output
	
	LISTEN_PORT = 10000
	
	# Determine my IPV6 address:
	myIP = check_output(['hostname', '-I']).split()[1]
	print("My IPV6 address is "+myIP)
	
	server_address = (myIP, 10000, 0, 0)
	
	# Create a TCP/IP socket
	sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM, 0)
	
	# Bind the socket to the port
	sock.bind(server_address)
	# Listen for incoming connections
	sock.listen(1)
	
	print("Ready for action.")
	pktcount = 0
	
	while True:
	    # Wait for a connection
	    connection, client_address = sock.accept()
	    try:
	        print >>sys.stderr, 'connection from', client_address
	
	        # Receive the data in small chunks and retransmit it
	        while True:
	            data = connection.recv(4096)
	            if not data:
	                print >>sys.stderr, 'no more data from', client_address
	                break
	            flowId = struct.unpack('>I',data[4:8])[0]
	            if flowId != 1: continue
	            seq = struct.unpack('>I',data[8:12])[0]
	            pktcount+=1
	            print(myIP+": From "+str(client_address[0])+": SEQ  = "+str(seq)+ " PKTCOUNT: "+str(pktcount))
	
	
	    finally:
	        # Clean up the connection
	        print("All done.  A total of "+str(pktcount)+" packets were successfully received.")
	        connection.close()
	
	
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	# HW7B
	interface eth0
	  ip address 172.16.0.22/24
	  ipv6 address a::22/120
	  ipv6 ospf6 instance-id 65
	  ipv6 ospf6 hello-interval 2
	  ipv6 ospf6 dead-interval 6
	  ipv6 ospf6 retransmit-interval 5
	  ipv6 ospf6 diffhellos
	  ipv6 ospf6 adjacencyconnectivity uniconnected
	  ipv6 ospf6 lsafullness mincostlsa
	!
	router ospf6
	  router-id 172.16.0.2
	  interface eth0 area 0.0.0.0
	  protocol-traffic-class 184
	  redistribute ospf
	  redistribute connected
	!
	
	}
    }
    custom-config {
	custom-config-id service:IPForward
	custom-command IPForward
	config {
	files=('ipforward.sh', )
	}
    }
    custom-config {
	custom-config-id service:IPForward:ipforward.sh
	custom-command ipforward.sh
	config {
	#!/bin/sh
	# auto-generated by IPForward service (utility.py)
	/sbin/sysctl -w net.ipv4.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.default.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.default.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.all.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.default.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.all.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.default.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth0.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth0.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth0.rp_filter=0
	#
	/sbin/sysctl -w net.ipv6.conf.eth0.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.eth0.send_redirects=1
	/sbin/sysctl -w net.ipv6.conf.eth0.rp_filter=0
	/sbin/sysctl -w net.ipv6.conf.eth0.accept_redirects=1
	
	}
    }
    services {OSPFv3 zebra IPForward UserDefined}
}

link l5 {
    nodes {n9 n2}
}

link l6 {
    nodes {n9 n1}
}

link l1 {
    nodes {n9 n3}
}

annotation a1 {
    iconcoords {254.0 150.0}
    type text
    label {--->  RELAY RACE --->}
    labelcolor #6e0000
    fontfamily {Arial}
    fontsize {28}
    canvas c1
}

annotation a2 {
    type text
    iconcoords {410.0 94.0}
    label {}
    canvas c1
}

annotation a3 {
    iconcoords {292.0 338.0}
    type text
    label {Transfer data from N2 to N3 as fast as possible.}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a4 {
    iconcoords {180.0 371.0}
    type text
    label {Modify relay_ipv6.py, which runs on N1, along with OSPF routing parameters.}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a5 {
    type text
    iconcoords {364.0 371.0}
    label {}
    canvas c1
}

annotation a6 {
    iconcoords {255.0 407.0}
    type text
    label {You may NOT modify any of the wlan and mgen parameters.}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a7 {
    type text
    iconcoords {373.0 407.0}
    label {}
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses no
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

